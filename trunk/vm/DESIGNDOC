                        +---------------------------+
                        |          CS 140           |
                        | PROJECT 3: VIRTUAL MEMORY |
                        |      DESIGN DOCUMENT      |
                        +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Josh Parnell <parnell@stanford.edu>
Steve Lesser <sklesser@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 PAGE TABLE MANAGEMENT
                 =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// in page.h

  /* page_table_entry defines the information that will be contained in the
     supplemental page table. Each entry will be inserted into a process'
     supplemental table, and is responsible for keeping track of a single
     page of virtual memory. */
  struct page_table_entry
    {
      struct hash_elem h_elem;      /* For wiring into a hash table. */
      struct list_elem l_elem;      /* For wiring into a frame's user list. */
      void* vaddr;                  /* Base virtual address of this page. */
      struct frame* frame;          /* Pointer to this page's frame element. */
      struct thread* thread;        /* Pointer to the relevant thread
                                       containing the current page directory
                                       and page table. */
    };

  /* page_table defines the supplemental page table contained in each process.
     Note that each process owns a page table lock for synchronization of paging
     during fault-handling. */
  struct page_table
    {
      struct hash table;
      struct lock lock;
    };

// in frame.h
                                       
  struct frame
    {
      void *paddr;                    /* Physical address of this frame. */
      uint32_t status;                /* Status bits (see #defines above). */
      uint32_t aux1;                  /* Swap slot OR mmapid. */
      uint32_t aux2;                  /* mmap file offset. */
      uint32_t aux3;                  /* mmap read bytes. */
      struct list_elem elem;          /* List element for allocated list. */
      struct list users;              /* List of all virtual pages using this
                                         physical frame (will usually be a
                                         single page). */
    };

// in struct thread (thread.h)
    struct page_table *page_table;      /* Supplemental page table for virtual
                                           memory management. */

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We maintain a supplemental page table of entries that each contain a
pointer corresponding to the frame containing the page's data. Note that
the frame needn't be in physical memory for the pointer to be valid. We
maintain this supplemental page table as a hash table. To find the frame
that contains the data of a given virtual address, we perform a hash table
lookup to find the supplemental page table entry corresponding to the given
virtual address, then examine the frame pointer within this entry.

If the data exists in physical memory, then frame->paddr will be non-null.
Otherwise, frame->paddr is NULL, but frame still contains all of the
necessary information to load the data back into memory upon requestion.
That is to say that the frame structure holds information about whether a
page is zeroed, swapped, or mmapped, as well as additional details specific
to the current mode of storage.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid this issue altogether by operating in the user virtual address
space at all times. Our system call infrastructure makes exclusive use of
user-space virtual addresses, such that we do not have to deal with kernel
aliasing.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

frame_page_in, which handles our demands for frames, requires that processes
acquire the frame_lock before touching the main list of frames or the clock
hand variable. Races are avoided by protected access to these shared
structures with a lock. Note that we also force a process to release the lock
while it writes a dirty page back to disk (so that other processes can proceed
if they do not require I/O).

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Our choice of supplemental page entry structure is simple and clean.
It simply maps a virtual page address to a frame. This allows the page
entries to remain relatively lightweight and easy to manage due to their
simplicity.

On the other hand, we perform much of the heavy-lifting of this assignment
with our frame structure, which encapsulates far more than just a slot in
physical memory. Frames contain information about whether their data is
zero-filled, swapped, or mmapped, and also hold information about swap slot,
mmap ids, etc. Essentially, we chose frame to mean "a page of data that is
generated and stored in a certain way, and may or may not be mapped to
physical memory at this time." The motivation for making the frame meatier
than the supplemental page entries was primarily to more elegantly support
frame sharing between processes, which, unfortunately, we did not get around
to in the end. However, we still feel that our design decisions made
management of pages and frames quite conceptually simple.

                       PAGING TO AND FROM DISK
                       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// in frame.c

  /* Holds a list of every frame that is currently resident in physical
     memory. This is the list that we will use for the clock algorith. */
  static struct list frames_allocated;

  /* Holds the current pointer into the frames_allocated list which
     signifies the next frame to be considered for eviction. */
  static struct list_elem *clock_hand = NULL;

  /* This lock must be acquired before manipulating frames_allocated. */
  struct lock frame_lock;

// in swap.c

  typedef uint32_t swapid_t;
  static struct block *swap_block;      /* Swap partition. */
  static struct bitmap *free_blocks;    /* true == free, false == allocated. */
  static struct lock swap_alloc_lock;   /* For allocating or freeing slots.*/
  static struct lock swap_io_lock;      /* For reading or writing slots. */

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

When we want to evict a frame (frame_choose_eviction) we iterate through
the frames_allocated list starting from our globally stored cursor and
wrapping around the end into the front. We evict the first frame which
was not accessed by any pages pointing at it and is not pinned or locked.
As we check each frame's page for whether it has been, accessed we reset
the accessed bit. This ensures that we will always be able to find a new
page, although it might (in the worst case) require that we search
through the entire allocated frame list more than once. This algorithm
is equivalent to the clock algorithm.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

When the frame that was previously used by process Q is evicted, the frame
remains connected to the supplemental page table, but the frame's paddr
pointer becomes NULL and it is removed from the frames_allocated list.
Additionally, the corresponding entry in Q's (hardware) page table is
removed. This is the only information that we must change to reflect the
transfer of the frame's ownership.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

On page faults, we can look at the stack pointer by looking at either the
intr_frame or the stored stack pointer in the current thread struct
(depending on whether the exception occurred in user or kernel mode). Note
that, in the syscall handler, we store the stack pointer so that we have
access to esp in the event of a kernel-mode page fault). We then check if the
fault address is less than (stack_pointer - 32) OR less than
PHYS_BASE - MAX_STACK. If it is, then the access is invalid and the process
is released. Otherwise, if the fault address is also less than PHYS_BASE,
then we deem it a valid stack address and create a new stack page at the
location.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

There are two types of locks, the single global frame lock and the per
process supplementary page table locks. The global frame_lock controls
creation and eviction of frames in addition to any operations on the
global frames_allocated list which is a list of all frames which currently
are currently loaded into physical memory. The per process supplementary
page table locks are used to ensure any changes to the local page table
attributes are safe and cause minimal waiting since other threads should
not have to wait for updating attributes on an unrelated thread's page
table.

There are at most two locks acquired with one of them being the
frame_lock and the other being a page table lock. The frame_lock is always 
acquired first. With these two conditions we are ensured there are no
orderings of lock acquires which create a circularity of
requests/ownership. Without circularity of ownership deadlocks are
avoided.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Before beginning the eviction process, we mark the frame (call it F)
with the FRAME_LOCKED flag, indicating that we don't want anyone else
to touch the frame. We then remove the frame from Q's physical page
table, so that it may no longer access F's memory. If Q tries to fault
F back in, it will see that F has the FRAME_LOCKED flag set, and will
recognize that it is not allowed to touch F. As such, it will return
from the fault-handler, continually suffering faults until Q clears
the locked flag. Note that this situation is rare enough that we
decided to prefer a 'busy-waiting' solution over something more
complicated.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Suppose that P acquires a free frame, call it F. F is NOT placed on the
list of allocated frames until *after* P finishes loading F (whether
from a file or swap). Hence, Q won't see F as an option for eviction.
Access to the allocated frames list is synchronized with a static lock
in frame.c. Note that it's perfectly OK for Q to evict F as soon as P
places F on the list - by that point in time, F is loaded and P must
relinquish all expectations about whether or not F is actually in memory.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We chose to go with a locking mechanism. During system calls that require
user-space buffer operations, we perform the buffer operations on
contiguous pages in user-space, one page at a time. We first mark the
page's frame with the FRAME_PINNED flag, then call frame_page_in to
ensure that the frame is in physical memory. Note that the frame is not
allowed to be evicted while this flag is set. frame_page_in is protected
by the lock in frame.c, so it is not possible for the frame to be
evicted after having been pinned and paged in.

If, at any point, we detect that the buffer is not mapped to valid user
virtual memory, we terminate the process. We perform this check *before*
acquiring any resources that might need to be released in the event of
failure, hence, we gracefully remove the requirement for "cleanup" in the
event that we encounter a problem with the buffer.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

For different parts of the VM system we use different numbers of
locks. For controlling the creation, eviction, and loading of frames there
is a single frame_lock due to the global nature of frames which can be
accessed by multiple processes. We thought this seemed the safest approach
for ensuring multiple processes would not run into race conditions from
sharing the same global frame pool. For controlling the insertion and
removal of elements in the supplementary page tables, we use per-process
locks built into the page_table struct which is a part of every thread
struct. We didn't think it was appropriate for updating any single
process's page table to cause all other processes to wait, hence we split
the lock up per process.

              MEMORY MAPPED FILES
              ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// in process.h

  /* An mmap_table_entry contains the information required to create an
     mmap->fd mapping withing a process. These entries are inserted into the
     process' mmap_table to enable tracking of all of the process' outstanding
     mmaps. */
  struct mmap_table_entry
    {
      struct list_elem elem;  /* List element for insertion into mmap_table. */
      mmapid_t id;            /* Per-process unique mmap id. */
      int fd;                 /* File descriptor for the file to which this mmap
                                 is mapped. */
    };

// in frame.h

  typedef int mmapid_t;

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped pages are marked by the frame associated with the page as
having an mmap flag set in addition to three auxilary pieces of
information: the mmapid, the offset into the file of the start of the
frame, and the amount of the page which is still part of the file (which
is PGSIZE for all but the last page).

On a page fault of a mmapped page, a valid physical address is obtained
and then the aux information found in the frame struct is used to read
the relevant part of the file into the physical address. If the remaining
part of the file to be read in is less than a page in size then the rest
of the page after the valid file parts is set to be 0. This is similar to
reading in swap pages, but the source is the file system instead
of swap space.

When an mmapped page is evicted, the pages referencing the relevant frame
are checked for dirtiness. If any of them are dirty, then the the frame is
written out to the original file using the auxilary data found in the
frame struct. This differs from the swap pages only in the destination of the
writing and in accounting for the final page in a file which may write out
less than a full page of data. Additionally, while an mmapped page is
always written out when dirty, other pages are written out (to swap) only
in the event that the process is *not* dying. If the process is dying,
then non-mmapped pages don't need to be written to swap (because the process
will never use them again). Dirty mmapped pages, however, are always
written back to the file system.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before creating the supplementary page table entries required for the
mmap, we walk through all the necessary pages and make sure that the pages
aren't already mapping in the existing supplemental page table. If we
succeed in doing so (i.e., the entire mmap region is free), then we carry
out the mmap. Otherwise, we return an error status to the user process.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Our mmap and executable demand-paged data shares a lot of implementation.
In factn our executable loading uses the mmap functionality, with only a
slight alteration. First, executable loading allocates pages in a different
way - since it is at the mercy of the parameters of load_segment, it must
allocate a given number of pages at a time, according to the read_bytes and
zero_bytes parameters.

The only other difference between mmap and our executable pages is that
executable pages are marked with the FRAME_CODE flag. FRAME_CODE is an edge-
case-handling flag. The only situation in which this flag is needed is if
the code and data segment overlap on a given page (i.e., there are some
number of read bytes and some number of data bytes). Then the user process
may try to write to the data part of the page, which must succeed. However,
since the page was partially loaded from the executable file, it is marked
as an MMAP page. But, unlike a real mmap page, it cannot be saved back to
the file when dirtied (because one cannot write to the executable). Hence,
the FRAME_CODE flag tells the frame handler that a dirty MMAP page which is
also a CODE page should be converted to a SWAP page, so that the written
data remains intact and the kernel doesn't try to write to the executable.

We felt that sharing implementations was definitely the best way to go here,
because more code paths meant more opportunities to make mistakes, and more
long debugging sessions (which, by the way, we have already had enough of).
So it made sense to leverage our mmap implementation as much as possible to
help executable loading.

       	      SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
